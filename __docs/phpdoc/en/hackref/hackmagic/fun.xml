<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.fun">
 <refnamediv>
  <refname>fun</refname>
  <refpurpose>Creates a function type from a constant string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>callable</type><methodname>fun</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>fun</function> takes a constant string and returns a callable representing the function named by the constant string. In the typechecker, the return value of this function has a proper function type, based upon looking up the function prototype named in the argument. This allows the typechecker to properly check callbacks which may be passed around; traditional PHP passes around strings, which are impossible to statically analyze and check invocations of.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Function of which to return a typecheckable callable form. Must be a constant, single-quoted string.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Callable representing the input function, with full typechecking information.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>fun</function> gives the typechecker visibility into a callback and function call</title>
    <programlisting role="php">
<![CDATA[
<?hh

function f(string $s): void {}

function test(): void {
  // The typechecker cannot determine what function $f refers to. It will reject
  // this in strict mode, but in partial mode will admit it, even though it
  // fails at runtime.
  $f = 'f';
  $f(1);

  // But, with a call to fun(), we can know what function $f refers to, and
  // check its arguments statically. This will produce a type error.
  $f = fun('f');
  $f(1);
}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>fun</function> is most useful for callbacks</title>
    <programlisting role="php">
<![CDATA[
<?hh

function run_callback((function(string): void) $f, string $s): void {
  $f($s);
}

function test2(): void {
  // Although this works at runtime, the typechecker will reject this, since 'f'
  // is a string, not a function.
  run_callback('f', 'test');

  // But this is acceptable:
  run_callback(fun('f'), 'test');
}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>class_meth</function></member>
    <member><function>inst_meth</function></member>
    <member><function>meth_caller</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
