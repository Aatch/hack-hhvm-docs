<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 332294 $ -->

<appendix xml:id="about" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>About the manual</title>

 <sect1 xml:id="about.origin">
  <title>Origin</title>
  <para>
    The Hack and HHVM Manual began as a clone and fork of the <link xlink:href="&url.php.docs;">php.net</link> manual. In essence, a snapshot of the php.net manual was grabbed and used as the basis for this manual. At this point, while we label the functions that HHVM does not currently support to the best of our ability, information sync'ing between php.net and this manual does not currently exist. Thus, if a change to the documentation on php.net occurs that same change will not be reflected in this manual, at least in an automated format. We are looking how best to make this happen.
  </para>
  <para>
    You will find the documentation sources for the Hack and HHVM manual in <link xlink:href="https://github.com/hhvm/hack-hhvm-docs">Github</link>. You can create issues, give pull requests and see instructions on how to build the documentation locally for testing.
  </para>
 </sect1>

 <sect1 xml:id="about.formats">
  <title>Formats</title>
  <para>
   The HHVM manual is currently in an English-only, online format.
  </para>
  <para>
   The manual can be read online at the <link xlink:href="&url.hhvm.manual;">docs.hhvm.com website</link>
  </para>
 </sect1>

 <sect1 xml:id="about.notes">
  <title>About user notes</title>
  <para>
    Currently, each topic links to the <link xlink:href="&url.hhvm.manual;">php.net</link> version of the user notes. Discussions are ongoing on how best to handle user notes moving forward.
  </para>
  <note>
   <para>
    For the purposes of license coverage the user-contributed notes are
    considered part of the HHVM manual, and are therefore covered by the
    same license that covers this documentation (Creative Commons Attribution
    at the moment). For
    more details see the <link linkend="copyright">Manual's Copyright</link>
    page.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="about.prototypes">
   <title>How to read a function definition (prototype)</title>
   <para>
    Each function in the manual is documented for quick reference. Knowing how
    to read and understand the text will make learning HHVM and Hack
    much easier.  Rather than relying on examples or cut/paste, everyone should
    know how to read function definitions (prototypes).  Let's begin:
   </para>
   <note>
    <title>
     Prerequisite: Basic understanding of <link linkend="language.types">types</link>
    </title>
    <para>
     Hack provides a static-typing option. It's important to have
     a basic understanding of <link linkend="language.types">types</link> as
     they have important meaning.
    </para>
   </note>
   <para>
    Function definitions tell us what
    type of value is <link linkend="functions.returning-values">returned</link>.
    Let's use the definition for <function>strlen</function> as our first example:
   </para>
   <para>
    <screen role="html">
<![CDATA[
strlen

(PHP 4, PHP 5)
strlen -- Get string length

Description
int strlen ( string $string )

Returns the length of given string.
]]>
    </screen>
   </para>
   <para>
    <table>
     <title>Explanation of a function definition</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Part</entry>
         <entry>Description</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          strlen
         </entry>
         <entry>
          The function name.
         </entry>
        </row>
        <row>
         <entry>
          (PHP 4, PHP 5)
         </entry>
         <entry>
          strlen() has been around in all versions of PHP 4 and PHP 5
         </entry>
        </row>
        <row>
         <entry>
          int
         </entry>
         <entry>
          Type of value this function returns, which is an
          <type>integer</type> (i.e. the length of a string is measured in
          numbers).
         </entry>
        </row>
        <row>
         <entry>
          ( string $string )
         </entry>
         <entry>
          The first (and in this case the only) parameter/argument for this
          function is named <parameter>string</parameter>, and it's a
          <type>string</type>.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     We could rewrite the above function definition in a generic way:
    </para>
    <para>
     <screen>
<![CDATA[
      returned type    function name    ( parameter type   parameter name )
]]>
     </screen>
    </para>
    <para>
     Many functions take on multiple parameters, such as <function>in_array</function>.
     Its prototype is as follows:
    </para>
    <para>
     <screen>
<![CDATA[
      bool in_array ( mixed $needle, array $haystack [, bool $strict])
]]>
     </screen>
    </para>
    <para>
     What does this mean?  in_array() returns a
     <link linkend="language.types.boolean">boolean</link> value, &true; on
     success (if the <parameter>needle</parameter> was found in the
     <parameter>haystack</parameter>)&return.falseforfailure; (if the
     <parameter>needle</parameter> was not found in the
     <parameter>haystack</parameter>).  The first parameter is named
     <parameter>needle</parameter> and it can be of many different
     <link linkend="language.types">types</link>, so we call it
     "<emphasis>mixed</emphasis>".  This mixed <parameter>needle</parameter>
     (what we're looking for) can be either a scalar value (string, integer,
     or <link linkend="language.types.float">float</link>), or an
     <link linkend="language.types.array">array</link>.
     <parameter>haystack</parameter> (the array we're searching in) is the
     second parameter.  The third <emphasis>optional</emphasis> parameter is
     named <parameter>strict</parameter>.  All optional parameters are seen
     in <emphasis>[</emphasis> brackets <emphasis>]</emphasis>.  The manual
     states that the <parameter>strict</parameter> parameter defaults to
     boolean &false;.  See the manual page on each function for details on
     how they work.
    </para>
    <para>
     There are also functions with more complex PHP version information. Take
     <function>html_entity_decode</function> as an example:
    </para>
    <para>
     <screen>
<![CDATA[
(PHP 4 >= 4.3.0, PHP 5)
]]>
     </screen>
    </para>
    <para>
     This means that this function has only been
     available in a released version since PHP 4.3.0.
    </para>
 </sect1>

 <sect1 xml:id="about.howtohelp">
  <title>How to help improve the documentation</title>
  <para>
   There are two ways everyone can help improve this documentation.
  </para>
  <para>
   If an error is found in this manual, in any language, please report them
   using the bug link at the bottom of every topic.
  </para>
  <note>
   <para>
    Please don't abuse the bug system by submitting requests for help.
    Instead, use a support option like the <link xlink:href="&url.hhvm.irc;">IRC channel</link>.
   </para>
  </note>
  <para>
   The HHVM and Hack manual is <link xlink:href="&url.hack.hhvm.docs;">open source on Github</link>. Please feel free to submit a pull request for any additions or modifcations.
  </para>
 </sect1>

 <sect1 xml:id="about.generate">
  <title>How we generate the formats</title>
  <para>
   This manual is written in <acronym>XML</acronym> using the <link
   xlink:href="&url.docbook.xml;">DocBook XML DTD</link>, using <link
   xlink:href="&url.phd;"><acronym>PhD</acronym></link> (The [PH]P based
   [D]ocBook renderer) for maintenance and formatting.
  </para>
  <para>
   Using <acronym>XML</acronym> as a source format gives
   the ability to generate many output formats from the source
   files, while only maintaining one source document for all formats.
   The tool used for formatting the online manual is <link
   xlink:href="&url.phd;">PhD</link>.
   We use PHP itself to do some additional conversions and formatting.
  </para>
 </sect1>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
