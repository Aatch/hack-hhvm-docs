<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.bootstrapping">
  <title>Bootstrapping a Project</title>
  <para>The static type system of Hack is enforced by a typechecker external to the HHVM runtime itself. It runs in the background, watching for file modifications and updating its state.</para>
  <sect1 xml:id="hack.bootstrapping.hhvm">
    <title>Running your project under HHVM</title>
    <para>The first step is to get HHVM running your project. You should have the latest version of HHVM installed, have a <literal>php.ini</literal> or <literal>config.hdf</literal> set up if necessary, and HHVM running as a webserver serving your project. In simple cases, running <literal>hhvm -m server -p 8080</literal> in your project root may be enough. More information on this is available elsewhere, notably https://github.com/facebook/hhvm/wiki/Running-PHP-programs-with-HHVM. TODO: should we port those docs over here? Better place to point at? How to linkify, ulink doesn't work?</para>
  </sect1>
  <sect1 xml:id="hack.bootstrapping.hh_server">
    <title>Getting the typechecker running</title>
    <para>In the root of your project directory, create an empty file named <literal>.hhconfig</literal>. The typechecker uses this file to know what directory tree to typecheck without needing to specify paths to every command.</para>
    <para>Now, run <literal>hh_client</literal>. This will start up the typechecking daemon, wait for it to finish checking the current directory tree, and report any errors that it found. Since your code is at this point likely all PHP and not Hack code, it should report <literal>No errors</literal>.</para>
    <para>To test that it is working, try adding a file with these contents to your project:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function f(): int {
  return 'not an int';
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>The exact details of the Hack language and its type annotations are discussed in detail in later sections, but hopefully you see that this function contains a type error &#8212; it is annotated to return an int, but actually returns a string. If you re-run <literal>hh_client</literal>, it should report this type error. The typechecker updated its state in the background, and <literal>hh_client</literal> retrieves that state.</para>
    <para>At this point, you can start changing your <literal>&lt;?php</literal> code into <literal>&lt;?hh</literal> code, adding annotations, and the typechecker will verify more and more of your codebase as you convert!</para>
  </sect1>
  <sect1 xml:id="hack.bootstrapping.stdlib">
    <title>Library functions</title>
    <para>HHVM ships with two sets of files that you should add to your Hack project: <literal>hhi</literal> and <literal>lib</literal>. You can find these directories in (TODO: where?).</para>
    <para>The <literal>lib</literal> directory contains executable code that you should add to your project's autoloader, or otherwise ensure gets loaded as needed. Many of these functions are treated specially by the typechecker. For example, if you write <literal>invariant($x instanceof SomeClass, 'Error')</literal>, we know that after that <literal>$x</literal> is a <literal>SomeClass</literal> and can typecheck it as such. The <literal>lib</literal> directory contains necessary code such that an actual function called "invariant" exists at runtime.</para>
    <para>The <literal>hhi</literal> directory contains information about the PHP standard library for the typechecker to consume. It should be in a location visible to the typechecker, but should <emphasis>not</emphasis> be ever executed at runtime or included in the autoloader. These files are effectively "interface" files that define types for parts of the standard library so the typechecker can verify they are used correctly. The runtime will produce an error if an hhi file is ever loaded at runtime, since it will redefine a function or class already built in to the runtime.</para>
  </sect1>
  <sect1 xml:id="hack.bootstrapping.vim">
    <title>Installing the vim bindings</title>
    <para>TODO</para>
  </sect1>
  <sect1 xml:id="hack.bootstrapping.emacs">
    <title>Installing the emacs bindings</title>
    <para>TODO</para>
  </sect1>
  <sect1 xml:id="hack.bootstrapping.structure">
    <title>Notes on suggested project structure</title>
    <para>Hack and the Hack typechecker were designed with certain assumptions and best practices in mind, and may not work well for projects that significantly diverge from this.</para>
    <para>The typechecker assumes that there is a global autoloader that can load any class on demand. This means that it insists that all class and function names are unique, and has no notion of checking imports or anything of that nature. Futhermore, it does not support conditional definitions of functions or classes &#8212; it must be able to statically know what is and what is not defined. It is of course perfectly possible to have a project that meets these requirements without a global autoloader, and the typechecker will work fine on such a project, but a project using an autoloader was the intended use case.</para>
    <para>Mixing HTML and Hack code are not supported by the typechecker. Following and statically analyzing these complicated mode switches is unsupported, particularly since much modern code doesn't make use of this functionality. Hack code can output markup to the browser in a simple way via <literal>echo</literal>, or using a templating engine or XHP for more complex scenarios. TODO: link to XHP docs.</para>
  </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
