<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.conversion">
  <title>Converting an Existing Project to Hack</title>
  <para>Once you have a project running under HHVM and <literal>hh_client</literal>, we have several automated conversion tools to help with different aspects of fully converting a project to Hack &#8212; especially the static type system. The suggested workflow is:
    <orderedlist>
      <listitem><para>Make as much PHP code visible to the typechecker as possible.</para></listitem>
      <listitem><para>Guess type annotations with a global inference tool, but log when they fail instead of failing hard.</para></listitem>
      <listitem><para>Parse error logs and remove annotations that do not match at runtime.</para></listitem>
      <listitem><para>Make the remaining annotations fail hard at runtime.</para></listitem>
    </orderedlist>
  </para>
  <sect1 xml:id="hack.conversion.hackificator">
    <title>Moving individual files over to Hack</title>
    <para>TODO</para>
    <!-- Note that the hackificator is number of files, not depth, what worked / not for Facebook -->
  </sect1>
  <sect1 xml:id="hack.conversion.annotations">
    <title>Inferring type annotations</title>
    <para>TODO</para>
  </sect1>
  <sect1 xml:id="hack.conversion.cleanup">
    <title>Hardening type annotations</title>
    <para>TODO</para>
  </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
